# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: 멜론 TOP100 수집

# on : 어떤 조건일 때 파일을 실행 시킬지 조건 설정
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 실제 파일 작업 내용
jobs:
  build:
    runs-on: ubuntu-latest # 깃헙에서 제공해주는 서버
    # strategy: # 파이썬 버전 설정(굳이 안해도 됨)
    #   fail-fast: false
    #   matrix:
    #     python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip


    # 필요한 라이브러리들을 설치
    - name : library install # 작업 제목
      run: |
        pip install requests
        pip install beautifulsoup4
        pip install pandas
        pip install lxml
    #     python -m pip install flake8 pytest
    #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # 내가 만든 파이썬 파일을 실행
    - name: run my file
      run: |
        python3 melon.py

    # 커밋
    - name : commits
      run : |
        git config --global user.email "wjdqhdrbs123@naver.com"
        git config --global user.name "Bong"
        git add melon_top_100.csv
        git commit -m "멜론차트 수집"


    # 푸쉬
    - name: push
      uses: ad-m/github-push-action@master
      with:
        branch: "main"
        github_token: ${{ secrets.crawling_test_token }}
